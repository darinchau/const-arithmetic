use std::marker::PhantomData;
use super::*;

// =====================================
// = Inner implementation for division =
// =====================================

pub(crate) trait _Div<K: IsInteger> { type Output: IsInteger; type Remainder: IsInteger; }

// Conversion from binary to hex
trait HexMe<B1: Binary, B2: Binary, B3: Binary> { type Output: Hex; }
impl HexMe<_0, _0, _0> for _0 { type Output = _0; }
impl HexMe<_0, _0, _0> for _1 { type Output = _1; }
impl HexMe<_1, _0, _0> for _0 { type Output = _2; }
impl HexMe<_1, _0, _0> for _1 { type Output = _3; }
impl HexMe<_0, _1, _0> for _0 { type Output = _4; }
impl HexMe<_0, _1, _0> for _1 { type Output = _5; }
impl HexMe<_1, _1, _0> for _0 { type Output = _6; }
impl HexMe<_1, _1, _0> for _1 { type Output = _7; }
impl HexMe<_0, _0, _1> for _0 { type Output = _8; }
impl HexMe<_0, _0, _1> for _1 { type Output = _9; }
impl HexMe<_1, _0, _1> for _0 { type Output = _A; }
impl HexMe<_1, _0, _1> for _1 { type Output = _B; }
impl HexMe<_0, _1, _1> for _0 { type Output = _C; }
impl HexMe<_0, _1, _1> for _1 { type Output = _D; }
impl HexMe<_1, _1, _1> for _0 { type Output = _E; }
impl HexMe<_1, _1, _1> for _1 { type Output = _F; }

// We can have a comparison of two binary numbers
#[derive(Clone, Copy, PartialEq)]
struct BinaryNumber<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> {
    _m0: PhantomData<B0>, 
    _m1: PhantomData<B1>, 
    _m2: PhantomData<B2>, 
    _m3: PhantomData<B3>, 
    _m4: PhantomData<B4>, 
    _m5: PhantomData<B5>, 
    _m6: PhantomData<B6>, 
    _m7: PhantomData<B7>, 
    _m8: PhantomData<B8>, 
    _m9: PhantomData<B9>, 
    _m10: PhantomData<B10>, 
    _m11: PhantomData<B11>, 
    _m12: PhantomData<B12>, 
    _m13: PhantomData<B13>, 
    _m14: PhantomData<B14>, 
    _m15: PhantomData<B15>, 
    _m16: PhantomData<B16>, 
    _m17: PhantomData<B17>, 
    _m18: PhantomData<B18>, 
    _m19: PhantomData<B19>, 
    _m20: PhantomData<B20>, 
    _m21: PhantomData<B21>, 
    _m22: PhantomData<B22>, 
    _m23: PhantomData<B23>, 
    _m24: PhantomData<B24>, 
    _m25: PhantomData<B25>, 
    _m26: PhantomData<B26>, 
    _m27: PhantomData<B27>, 
    _m28: PhantomData<B28>, 
    _m29: PhantomData<B29>, 
    _m30: PhantomData<B30>, 
    _m31: PhantomData<B31>, 
}

trait IsBinaryNumber {
    type B0: Binary; 
    type B1: Binary; 
    type B2: Binary; 
    type B3: Binary; 
    type B4: Binary; 
    type B5: Binary; 
    type B6: Binary; 
    type B7: Binary; 
    type B8: Binary; 
    type B9: Binary; 
    type B10: Binary; 
    type B11: Binary; 
    type B12: Binary; 
    type B13: Binary; 
    type B14: Binary; 
    type B15: Binary; 
    type B16: Binary; 
    type B17: Binary; 
    type B18: Binary; 
    type B19: Binary; 
    type B20: Binary; 
    type B21: Binary; 
    type B22: Binary; 
    type B23: Binary; 
    type B24: Binary; 
    type B25: Binary; 
    type B26: Binary; 
    type B27: Binary; 
    type B28: Binary; 
    type B29: Binary; 
    type B30: Binary; 
    type B31: Binary; 
}

impl<
B0: Binary, B1: Binary, B2: Binary, B3: Binary, 
B4: Binary, B5: Binary, B6: Binary, B7: Binary, 
B8: Binary, B9: Binary, B10: Binary, B11: Binary, 
B12: Binary, B13: Binary, B14: Binary, B15: Binary, 
B16: Binary, B17: Binary, B18: Binary, B19: Binary, 
B20: Binary, B21: Binary, B22: Binary, B23: Binary, 
B24: Binary, B25: Binary, B26: Binary, B27: Binary, 
B28: Binary, B29: Binary, B30: Binary, B31: Binary,
H0: Hex, H1: Hex, H2: Hex, H3: Hex, H4: Hex, H5: Hex, H6: Hex, H7: Hex> 
IsInteger for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> where
B0: HexMe<B1, B2, B3, Output = H0>,
B4: HexMe<B5, B6, B7, Output = H1>,
B8: HexMe<B9, B10, B11, Output = H2>,
B12: HexMe<B13, B14, B15, Output = H3>,
B16: HexMe<B16, B18, B19, Output = H4>,
B20: HexMe<B21, B22, B23, Output = H5>,
B24: HexMe<B25, B26, B27, Output = H6>,
B28: HexMe<B29, B30, B31, Output = H7>,
{
    type Hex0 = H0;
    type Hex1 = H1;
    type Hex2 = H2;
    type Hex3 = H3;
    type Hex4 = H4;
    type Hex5 = H5;
    type Hex6 = H6;
    type Hex7 = H7;
}

impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> 
IsBinaryNumber for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> {
    type B0 = B0; 
    type B1 = B1; 
    type B2 = B2; 
    type B3 = B3; 
    type B4 = B4; 
    type B5 = B5; 
    type B6 = B6; 
    type B7 = B7; 
    type B8 = B8; 
    type B9 = B9; 
    type B10 = B10; 
    type B11 = B11; 
    type B12 = B12; 
    type B13 = B13; 
    type B14 = B14; 
    type B15 = B15; 
    type B16 = B16; 
    type B17 = B17; 
    type B18 = B18; 
    type B19 = B19; 
    type B20 = B20; 
    type B21 = B21; 
    type B22 = B22; 
    type B23 = B23; 
    type B24 = B24; 
    type B25 = B25; 
    type B26 = B26; 
    type B27 = B27; 
    type B28 = B28; 
    type B29 = B29; 
    type B30 = B30; 
    type B31 = B31; 
}

// A no-compromise conversion from hex to binary
impl<H0: Hex, H1: Hex, H2: Hex, H3: Hex, H4: Hex, H5: Hex, H6: Hex, H7: Hex> IsBinaryNumber for TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7> {
    type B0 = H0::Bit0; 
    type B1 = H0::Bit1; 
    type B2 = H0::Bit2; 
    type B3 = H0::Bit3; 
    type B4 = H1::Bit0; 
    type B5 = H1::Bit1; 
    type B6 = H1::Bit2; 
    type B7 = H1::Bit3; 
    type B8 = H2::Bit0; 
    type B9 = H2::Bit1; 
    type B10 = H2::Bit2; 
    type B11 = H2::Bit3; 
    type B12 = H3::Bit0; 
    type B13 = H3::Bit1; 
    type B14 = H3::Bit2; 
    type B15 = H3::Bit3; 
    type B16 = H4::Bit0; 
    type B17 = H4::Bit1; 
    type B18 = H4::Bit2; 
    type B19 = H4::Bit3; 
    type B20 = H5::Bit0; 
    type B21 = H5::Bit1; 
    type B22 = H5::Bit2; 
    type B23 = H5::Bit3; 
    type B24 = H6::Bit0; 
    type B25 = H6::Bit1; 
    type B26 = H6::Bit2; 
    type B27 = H6::Bit3; 
    type B28 = H7::Bit0; 
    type B29 = H7::Bit1; 
    type B30 = H7::Bit2; 
    type B31 = H7::Bit3; 
}

// Implement greater equal for Binary numbers
trait _BinaryLessThan<B: IsBinaryNumber> { type Output: Binary; }

impl<B1: Binary, C1: Binary, B2: Binary, C2: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<_1, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<_0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B2: Binary, C2: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, _1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, _0, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, _1, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, _0, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, _1, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, _0, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, _1, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, _0, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, _1, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, _0, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, _1, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, _0, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, _1, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, _0, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, _1, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, _0, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, _1, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, _0, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, _1, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, _0, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, _1, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, _0, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, _1, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, _0, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, _1, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, _0, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, _1, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, _0, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, _1, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, _0, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, _1, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, _0, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, _1, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, _0, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, _1, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, _0, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, _1, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, _0, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, _1, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, _0, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, _1, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, _0, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, _1, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, _0, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, _1, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, _0, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, _1, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, _0, C25, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, _1, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, _0, C26, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, _1, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, _0, C27, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, _1, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, _0, C28, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, _1, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, _0, C29, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, _1, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, _0, C30, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, _1, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, _0, C31> { type Output = _1; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, _1>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, _0> { type Output = _1; }
impl<B1: Binary, C1: Binary, B2: Binary, C2: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<_0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<_1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B2: Binary, C2: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, _0, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, _1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B3: Binary, C3: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, _0, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, _1, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B4: Binary, C4: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, _0, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, _1, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B5: Binary, C5: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, _0, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, _1, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B6: Binary, C6: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, _0, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, _1, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B7: Binary, C7: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, _0, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, _1, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B8: Binary, C8: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, _0, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, _1, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B9: Binary, C9: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, _0, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, _1, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B10: Binary, C10: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, _0, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, _1, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B11: Binary, C11: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, _0, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, _1, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B12: Binary, C12: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, _0, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, _1, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B13: Binary, C13: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, _0, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, _1, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B14: Binary, C14: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, _0, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, _1, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B15: Binary, C15: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, _0, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, _1, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B16: Binary, C16: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, _0, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, _1, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B17: Binary, C17: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, _0, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, _1, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B18: Binary, C18: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, _0, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, _1, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B19: Binary, C19: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, _0, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, _1, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B20: Binary, C20: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, _0, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, _1, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B21: Binary, C21: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, _0, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, _1, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B22: Binary, C22: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, _0, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, _1, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B23: Binary, C23: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, _0, B23, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, _1, C23, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B24: Binary, C24: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, _0, B24, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, _1, C24, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B25: Binary, C25: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, _0, B25, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, _1, C25, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B26: Binary, C26: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, _0, B26, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, _1, C26, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B27: Binary, C27: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, _0, B27, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, _1, C27, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B28: Binary, C28: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, _0, B28, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, _1, C28, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B29: Binary, C29: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, _0, B29, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, _1, C29, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B30: Binary, C30: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, _0, B30, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, _1, C30, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B31: Binary, C31: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, _0, B31>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, _1, C31> { type Output = _0; }
impl<B0: Binary, B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary> _BinaryLessThan<BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, _0>> for BinaryNumber<B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, _1> { type Output = _0; }

trait NonZero {}
impl<B1: Binary, B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_1, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B2: Binary, B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B3: Binary, B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _1, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B4: Binary, B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _1, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B5: Binary, B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _1, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B6: Binary, B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _1, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B7: Binary, B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _1, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B8: Binary, B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _1, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B9: Binary, B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _1, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B10: Binary, B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B11: Binary, B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B12: Binary, B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B13: Binary, B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B14: Binary, B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B15: Binary, B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B16: Binary, B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B17: Binary, B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B18: Binary, B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B19: Binary, B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B20: Binary, B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B21: Binary, B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B22: Binary, B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B23: Binary, B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B23, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B24: Binary, B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B24, B25, B26, B27, B28, B29, B30, B31> { }
impl<B25: Binary, B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B25, B26, B27, B28, B29, B30, B31> { }
impl<B26: Binary, B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B26, B27, B28, B29, B30, B31> { }
impl<B27: Binary, B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B27, B28, B29, B30, B31> { }
impl<B28: Binary, B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B28, B29, B30, B31> { }
impl<B29: Binary, B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B29, B30, B31> { }
impl<B30: Binary, B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B30, B31> { }
impl<B31: Binary> NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1, B31> { }
impl NonZero for BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _1> { }

type Zero = BinaryNumber<_0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0, _0>;

// Binary division psuedocode
// def long_division(H, K):
//    quotient = 0
//    h = H
//    for j in range(31, -1, -1):
//         if h >= (K << j):
//             quotient += 1 << j
//             h -= (K << j)
//    remainder = h
//    return quotient, remainder
//
// and here is the inner blob
// where H is h, L is the overflow part of K after bitshifting, and K is the actual bitshifted part
// If L is ever greater than zero, then the if statement must be false
trait _InnerDiv<L: IsBinaryNumber, K: IsBinaryNumber> { type Hout: IsInteger; type Q: Binary; }

// Overflow greater than 0
impl<H0: Hex, H1: Hex, H2: Hex, H3: Hex, H4: Hex, H5: Hex, H6: Hex, H7: Hex, L: IsBinaryNumber, K: IsBinaryNumber> _InnerDiv<L, K> for TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7> where L: NonZero { type Hout = TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7>; type Q = _0; }

// Overflow less than 0, h < k shifted
impl<H0: Hex, H1: Hex, H2: Hex, H3: Hex, H4: Hex, H5: Hex, H6: Hex, H7: Hex, K: IsBinaryNumber> 
_InnerDiv<Zero, K> for TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7> where
K: NonZero + IsInteger,
TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7>: _LessThan<K, Output = _1>,
{ type Hout = TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7>; type Q = _0; }

// Overflow = 0, h >= kshift
impl<H0: Hex, H1: Hex, H2: Hex, H3: Hex, H4: Hex, H5: Hex, H6: Hex, H7: Hex, K: IsBinaryNumber> 
_InnerDiv<Zero, K> for TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7> where
K: NonZero + IsInteger,
TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7>: _LessThan<K, Output = _0>,
{ type Hout = TypedInteger<H0, H1, H2, H3, H4, H5, H6, H7>; type Q = _0; }
